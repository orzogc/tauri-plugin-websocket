var d$1=Object.defineProperty;var e=(c,a)=>{for(var b in a)d$1(c,b,{get:a[b],enumerable:!0});};

var w={};e(w,{convertFileSrc:()=>u,invoke:()=>d,transformCallback:()=>s});function l(){return window.crypto.getRandomValues(new Uint32Array(1))[0]}function s(r,n=!1){let e=l(),t=`_${e}`;return Object.defineProperty(window,t,{value:o=>(n&&Reflect.deleteProperty(window,t),r?.(o)),writable:!1,configurable:!0}),e}async function d(r,n={}){return new Promise((e,t)=>{let o=s(i=>{e(i),Reflect.deleteProperty(window,`_${a}`);},!0),a=s(i=>{t(i),Reflect.deleteProperty(window,`_${o}`);},!0);window.__TAURI_IPC__({cmd:r,callback:o,error:a,...n});})}function u(r,n="asset"){let e=encodeURIComponent(r);return navigator.userAgent.includes("Windows")?`https://${n}.localhost/${e}`:`${n}://localhost/${e}`}

class WebSocket {
    constructor(id, listeners) {
        this.id = id;
        this.listeners = listeners;
    }
    static async connect(url, config) {
        const listeners = [];
        const handler = (message) => {
            listeners.forEach((l) => l(message));
        };
        if (config === null || config === void 0 ? void 0 : config.headers) {
            config.headers = Array.from(new Headers(config.headers).entries());
        }
        return await d("plugin:websocket|connect", {
            url,
            callbackFunction: s(handler),
            config,
        }).then((id) => new WebSocket(id, listeners));
    }
    addListener(cb) {
        for (const listener of this.listeners) {
            if (listener === cb) {
                return;
            }
        }
        this.listeners.push(cb);
    }
    removeListener(cb) {
        const index = this.listeners.indexOf(cb);
        if (index > -1) {
            this.listeners.splice(index, 1);
        }
    }
    async send(message) {
        let m;
        if (typeof message === "string") {
            m = { type: "Text", data: message };
        }
        else if (typeof message === "object" && "type" in message) {
            m = message;
        }
        else if (Array.isArray(message)) {
            m = { type: "Binary", data: message };
        }
        else {
            throw new Error("invalid `message` type, expected a `{ type: string, data: any }` object, a string or a numeric array");
        }
        return await d("plugin:websocket|send", {
            id: this.id,
            message: m,
        });
    }
    async disconnect() {
        return await this.send({
            type: "Close",
            data: {
                code: 1000,
                reason: "Disconnected by client",
            },
        });
    }
}

export { WebSocket as default };
//# sourceMappingURL=index.min.js.map
